'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = exports.eventType = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _logFromKeys = require('../util/logFromKeys');

var _logFromKeys2 = _interopRequireDefault(_logFromKeys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var type = 's3';

function eventType() {
  var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _event$Records = event.Records,
      Records = _event$Records === undefined ? [] : _event$Records;

  var _Records = _slicedToArray(Records, 1),
      _Records$ = _Records[0],
      firstEvent = _Records$ === undefined ? {} : _Records$;

  var eventVersion = firstEvent.eventVersion,
      eventSource = firstEvent.eventSource;

  return eventVersion === '2.0' && eventSource === 'aws:s3' ? type : false;
}

var keys = ['responseElements["x-amz-request-id"]', 'responseElements["x-amz-id-2"]', 'awsRegion', 's3.bucket.name', 's3.bucket.arn', 's3.object.key', 's3.object.size', 's3.object.sequencer', 'eventTime', 'eventName', 'userIdentity.principalId', 'requestParameters.sourceIPAddress'].map(function (str) {
  return `Records[0].${str}`;
});

function plugin(event, log) {
  (0, _logFromKeys2.default)({
    type,
    event,
    keys,
    log
  });
}

exports.eventType = eventType;
exports.plugin = plugin;