'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _package = require('../package');

var _package2 = _interopRequireDefault(_package);

var _eventType = require('./util/eventType');

var _plugins = require('./plugins');

var reportPlugins = _interopRequireWildcard(_plugins);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventInfoPlugin = function () {
  function EventInfoPlugin() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var invocationInstance = arguments[1];

    _classCallCheck(this, EventInfoPlugin);

    this.invocationInstance = invocationInstance;
    this.config = config;

    this.hooks = {
      'post:invoke': this.postInvoke.bind(this)
    };
    return this;
  }

  _createClass(EventInfoPlugin, [{
    key: 'postInvoke',
    value: function postInvoke() {
      try {
        var _invocationInstance = this.invocationInstance,
            event = _invocationInstance.event,
            context = _invocationInstance.context;

        var eventType = (0, _eventType.getEventType)(event);
        /* eslint-disable import/namespace */
        var eventPlugin = reportPlugins[eventType] && reportPlugins[eventType].plugin;
        /* eslint-enable import/namespace */
        if (typeof eventPlugin !== 'function') {
          return false;
        }
        if (typeof context.iopipe.label === 'function') {
          context.iopipe.label('@iopipe/plugin-event-info');
          context.iopipe.label(`@iopipe/aws-${(0, _eventType.eventTypeToSlug)(eventType)}`);
        }
        eventPlugin(event, context.iopipe.log);
      } catch (err) {
        // err
      }
      return true;
    }
  }, {
    key: 'meta',
    get: function get() {
      var name = _package2.default.name,
          version = _package2.default.version,
          homepage = _package2.default.homepage;

      return { name, version, homepage };
    }
  }]);

  return EventInfoPlugin;
}();

module.exports = function (pluginOpts) {
  return function (invocationInstance) {
    return new EventInfoPlugin(pluginOpts, invocationInstance);
  };
};