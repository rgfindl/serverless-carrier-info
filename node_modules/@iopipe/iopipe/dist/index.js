'use strict';

module.exports = require('@iopipe/core');

function warning(fn) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  /*eslint-disable no-console*/
  var str = `${fn}(${args.join(',')}) was called from @iopipe/iopipe but this method was not available. You may have called this method outside of an invocation or @iopipe/core needs to be upgraded to satisfy version ^1.11.0`;
  console.warn(str);
  return str;
  /*eslint-enable no-console*/
}

function ctx() {
  var context = typeof module.exports.getContext === 'function' && module.exports.getContext() || {};
  return context.iopipe || {
    mark: {
      start: warning.bind(null, 'mark.start'),
      end: warning.bind(null, 'mark.end')
    },
    metric: warning.bind(null, 'metric'),
    label: warning.bind(null, 'label')
  };
}

module.exports.mark = {
  start: function start() {
    var _ctx$mark;

    return (_ctx$mark = ctx().mark).start.apply(_ctx$mark, arguments);
  },
  end: function end() {
    var _ctx$mark2;

    return (_ctx$mark2 = ctx().mark).end.apply(_ctx$mark2, arguments);
  }
};

module.exports.metric = function () {
  var _ctx;

  return (_ctx = ctx()).metric.apply(_ctx, arguments);
};
module.exports.label = function () {
  var _ctx2;

  return (_ctx2 = ctx()).label.apply(_ctx2, arguments);
};