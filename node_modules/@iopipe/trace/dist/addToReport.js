'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.addToReport = addToReport;
exports.addHttpTracesToReport = addHttpTracesToReport;

var _flat = require('flat');

function headersObjToArray(headerObj) {
  return Object.keys(headerObj || {}).map(function (key) {
    return { key, string: headerObj[key] };
  });
}

function addToReport(pluginInstance, timelineArg) {
  var timeline = pluginInstance.timeline,
      invocationInstance = pluginInstance.invocationInstance;

  var entries = (timelineArg || timeline).getEntries();
  var report = invocationInstance.report.report;

  report.performanceEntries = (report.performanceEntries || []).concat(entries);
}

function addHttpTracesToReport(plugin) {
  var _plugin$autoHttpData$ = plugin.autoHttpData.timeline,
      timeline = _plugin$autoHttpData$ === undefined ? {} : _plugin$autoHttpData$;
  var _plugin$invocationIns = plugin.invocationInstance.report;
  _plugin$invocationIns = _plugin$invocationIns === undefined ? {} : _plugin$invocationIns;
  var _plugin$invocationIns2 = _plugin$invocationIns.report,
      report = _plugin$invocationIns2 === undefined ? {} : _plugin$invocationIns2;

  Object.keys(plugin.autoHttpData.data).forEach(function (id) {
    var obj = (0, _flat.unflatten)(plugin.autoHttpData.data[id] || {});
    if (obj.request) {
      obj.request.headers = headersObjToArray(obj.request.headers);
    }
    if (obj.response) {
      obj.response.headers = headersObjToArray(obj.response.headers);
    }
    // use start mark for startTime in case the http call did not finish / no callback
    // and we do not have a measurement

    var _ref = timeline.getEntriesByName(`start:${id}`) || [],
        _ref2 = _slicedToArray(_ref, 1),
        _ref2$ = _ref2[0],
        startMark = _ref2$ === undefined ? {} : _ref2$;

    var _ref3 = timeline.getEntriesByName(`measure:${id}`) || [],
        _ref4 = _slicedToArray(_ref3, 1),
        _ref4$ = _ref4[0],
        measureMark = _ref4$ === undefined ? {} : _ref4$;

    obj.timestamp = startMark.timestamp || 0;
    obj.startTime = startMark.startTime || 0;
    obj.duration = measureMark.duration || 0;
    report.httpTraceEntries.push(obj);
  });
}